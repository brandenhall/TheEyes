
class Eye():
    cell_offsets = (
        (0, 0), (0, -1), (0, -1), (1, -1), (0, 1), (0, 1), (0, 1), (1, 0),
        (0, -1), (0, -1), (0, -1), (0, -1), (1, -1), (0, 1), (0, 1), (0, 1),
        (0, 1), (0, 1), (1, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, -1),
        (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (1, -1), (0, -1), (0, -1),
        (0, -1), (0, -1), (1, -1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1),
        (1, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, -1), (0, 1), (0, 1),
        (0, 1), (0, 1), (0, 1), (1, -1), (0, -1), (0, -1), (0, -1), (0, -1),
        (1, 0), (0, 1), (0, 1), (0, 1), (1, -1), (0, -1), (0, -1),
    )

    cell_neighbors = (
        (1, 5, 6, None, None, None),
        (2, 4, 5, 0, None, None),
        (None, 3, 4, 1, None, None),
        (None, 11, 10, 4, 2, None),
        (3, 10, 9, 5, 1, 2),
        (4, 9, 8, 6, 0, 1),
        (5, 8, 7, None, None, 0),
        (8, 16, 17, None, None, 6),
        (9, 15, 16, 7, 6, 5),
        (10, 14, 15, 8, 5, 4),
        (11, 13, 14, 9, 4, 3),
        (None, 12, 13, 10, 3, None),
        (None, None, 22, 13, 11, None),
        (12, 22, 21, 14, 10, 11),
        (13, 21, 20, 15, 9, 10),
        (14, 20, 19, 16, 8, 9),
        (15, 19, 18, 17, 7, 8),
        (16, 18, None, None, None, 7),
        (19, 27, 28, None, 17, 16),
        (20, 26, 27, 18, 16, 15),
        (21, 25, 26, 19, 15, 14),
        (22, 24, 25, 20, 14, 13),
        (None, 23, 24, 21, 13, 12),
        (None, None, 33, 24, 22, None),
        (23, 33, 32, 25, 21, 22),
        (24, 32, 31, 26, 20, 21),
        (25, 31, 30, 27, 19, 20),
        (26, 30, 29, 28, 18, 19),
        (27, 29, None, None, None, 18),
        (30, 38, 39, None, 28, 27),
        (31, 37, 38, 29, 27, 26),
        (32, 36, 37, 30, 26, 25),
        (33, 35, 36, 31, 25, 24),
        (None, 34, 35, 32, 24, 23),
        (None, None, 44, 35, 33, None),
        (34, 44, 43, 36, 32, 33),
        (35, 43, 42, 37, 31, 32),
        (36, 42, 41, 38, 30, 31),
        (37, 41, 40, 39, 29, 30),
        (38, 40, None, None, None, 29),
        (41, 49, 50, None, 39, 38),
        (42, 48, 49, 40, 38, 37),
        (43, 47, 48, 41, 37, 36),
        (44, 46, 47, 42, 36, 35),
        (None, 45, 46, 43, 35, 34),
        (None, None, 55, 46, 44, None),
        (45, 55, 54, 47, 43, 44),
        (46, 54, 53, 48, 42, 43),
        (47, 53, 52, 49, 41, 42),
        (48, 52, 51, 50, 40, 41),
        (49, 51, None, None, None, 40),
        (52, 59, None, None, 50, 49),
        (53, 58, 59, 51, 49, 48),
        (54, 57, 58, 52, 48, 47),
        (55, 56, 57, 53, 47, 46),
        (None, None, 56, 54, 46, 45),
        (None, None, 62, 57, 54, 55),
        (56, 62, 61, 58, 53, 54),
        (57, 61, 60, 59, 52, 53),
        (58, 60, None, None, 51, 52),
        (61, None, None, None, 59, 58),
        (62, None, None, 60, 58, 57),
        (None, None, None, 61, 57, 56),
    )

    def __init__(self):
        self.pixels = [[0, 0, 0], ] * 64

    def encode(self):
        count = 0
        palette = {}
        pbn = []
        output = bytearray()
        output.append(0)

        # simple palette based compression
        for pixel in self.pixels:
            color = pixel[0] << 16 & pixel[1] << 8 & pixel[2]
            if color not in palette:
                palette[color] = count
                pbn.append(count)
                output.extend(pixel)
                count += 1
            else:
                pbn.append(palette[color])

        output[0] = len(palette)

        for p in pbn:
            output.append(p)

        return bytes(output)
